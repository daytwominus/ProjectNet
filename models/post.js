var mongoose     = require('mongoose');
var Schema       = mongoose.Schema;
var users = require('./user');

var PostSchema   = new Schema({
    provider: String,
    id: String,//A unique identifier for the user, as generated by the service provider.
    data: String,
    categories: [String],
    userId: String,
    showOnMain : Boolean,
    isDeleted: Boolean,
    sections: [Schema.Types.ObjectId]
});

var Post = mongoose.model('post', PostSchema);

var findUniversal = function(params, callback) {
    console.log("trying to find posts: " + JSON.stringify(params));

    Post.find(params).or({isDeleted : {$exists: false}}, {isDeleted : {$exists: true, $eq:true}}).sort('-_id').exec(function(err, x){
        console.log("posts: " + JSON.stringify(x));
        callback(err, x);
    });
};

var getAllPosts = function(callback) {
    console.log('getting all logs');
    Post.find({}).sort('-_id').exec(function(err, x){
        console.log("all posts: " + JSON.stringify(x));
        callback(err, x);
    });
};

var savePostRoutine = function (p, callback){
    console.log("saving post: " + JSON.stringify(p));

    if(p["_id"]){
        console.log('post with id ' + p._id + " exists; updating.")
        Post.findOneAndUpdate({"_id": p._id.toObjectId()}, p).exec();
    }
    else{
        console.log('creating new post ' + JSON.stringify(p));
        var x = new Post();
        for (var key in p) {
            x[key] = p[key];}
        x.save(function (err) {
            if (err)
                console.log('error saving post');
            console.log("post saved: " + JSON.stringify(x));
            callback(err, x);
        });
    }
};

module.exports = {
    findPostsUniversal : findUniversal,
    getAll:getAllPosts,
    findPostsWithSection : function(sectId, callback) {
        console.log("trying to find posts for section id=" + JSON.stringify(sectId));

        Post.find({sections: sectId}).or({isDeleted : {$exists: false}}, {isDeleted : {$exists: true, $eq:true}}).sort('-_id').exec(function(err, x){
            console.log("posts for section " + sectId + ': ' + JSON.stringify(x));
            callback(err, x);
        });
    },
    findPostsForUserName : function(username, callback) {
        console.log("trying to find posts for user with name=" + JSON.stringify(username));
        users.findUsersUniversal({"name":username}, function(err, data){
            if(!data || data.length==0){
                callback(err, []);
                return;
            }
            var id = data[0]["_id"];
            console.log('now getting posts with userId=', id);
            Post.find({'userId': id}).or({isDeleted : {$exists: false}}, {isDeleted : {$exists: true, $eq:true}}).sort('-_id').exec(function(err, x){
                console.log("posts for user " + username + ': ' + JSON.stringify(x));
                callback(err, x);
            });
        });


    },
    savePost: savePostRoutine,
    deletePost: function (p, callback){
        console.log("deleting post: " + JSON.stringify(p));
        p.isDeleted = 1;
        savePostRoutine(p);
        //Post.findOneAndRemove({"_id": p._id.toObjectId()}).exec();
        callback();
    }
}

