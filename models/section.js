var mongoose     = require('mongoose');
var Schema       = mongoose.Schema;

var SectionSchema   = new Schema({
    provider: String,
    id: String,//A unique identifier for the user, as generated by the service provider.
    name: String,
    isDeleted: Boolean,
    category: String
});

var Section = mongoose.model('section', SectionSchema);

var saveRoutine = function(s, done){
    console.log("creating section:" + JSON.stringify(s));

    if(s["_id"]){
        console.log('section with id ' + s._id + " exists; updating.")
        Section.findOneAndUpdate({"_id": s._id.toObjectId()}, s).exec();
    }
    else{
        console.log('creating new section ' + JSON.stringify(s));
        var x = new Section();
        for (var key in s) {
            x[key] = s[key];}
        x.save(function (err) {
            if (err)
                console.log('error saving section');
            console.log("section saved: " + JSON.stringify(x));
            done(err, x);
        });
    }
};

module.exports = {
    findSectionById: function (id, callback){
        var params = {"id":id};
        console.log("trying to find section: " + JSON.stringify(params));
        Section.collection.findOne(params, function(err, res){
            if(err) {
                console.log("error!");
                callback(err);
            }
            else {
                console.log("found section: " + JSON.stringify(res));
                callback(null, res);
            }
        })
    },
    getSections : function(params, callback){
        //console.log("trying to find sections: " + JSON.stringify(params));

        Section.find(params).or({isDeleted : {$exists: false}}, {isDeleted : {$exists: true, $eq:true}}).sort('-_id').exec(function(err, x){
            //console.log("sections: " + JSON.stringify(x));
            callback(err, x);
        });
    },
    saveSection: saveRoutine,
    deleteSection: function (p, callback){

        console.log("deleting section: " + JSON.stringify(p));
        p.isDeleted = 1;
        saveRoutine(p, callback);
    }
}

